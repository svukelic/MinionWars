@using Jmelosegui.Mvc.GoogleMap
@using System.Drawing
@model VZwars.Models.UserDataModel

<!-- Modal -->
@Html.Partial("Partial_userPageModal")

@Html.Partial("Partial_battlegroupPageModal")

@Html.Partial("Partial_campPageModal")

@Html.Partial("Partial_resourcesPageModal")

@Html.Partial("Partial_clickModal")

@Html.Partial("Partial_buildingModal")

@Html.Partial("Partial_groupCreationModal")

@Html.Partial("Partial_buildingCreationModal")

@Html.Partial("Partial_bgClickModal")

@Html.Partial("Partial_resNodeClickModal")

@Html.Partial("Partial_hiveNodeClickModal")

@Html.Partial("Partial_caravanClickModal")

@Html.Partial("Partial_campClickModal")

<!-- Mapa -->
<div class="row">
        @(Html.GoogleMap()
              .Name("map")
              .Center(c => c.Latitude(46.312d).Longitude(16.361d))
              .Zoom(15)
              .Height(600)
              .ScaleControlVisible(false).PanControlVisible(false).OverviewMapControlVisible(false).StreetViewControlVisible(false).ZoomControlVisible(false).MapTypeControlVisible(false)
              .ApiKey("AIzaSyB3HF7za99ZA7QS8LhLJTkGN95LTB-_Ffk")
              .ClientEvents(events => events.OnMapClick("mapClickEvent").OnMapLoaded("mapLoadedEvent"))
        )
</div>

@section scripts
{
    @(Html.GoogleMap().ScriptRegistrar())
    <link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
    <script type="text/javascript">
        var UserMarker = null;
        var map = null;
        var clickedPosition = null;
        var clickedMarker = null;
        var subscribedMarkers = new Array();
        var markerMovement = new Array();
        var bgMarkersData = new Array();

        var targetId = null;
        var targetLoc = null;

        $(document).ready(function () {
            navigator.geolocation.watchPosition(savePosition);
            //navigator.geolocation.getCurrentPosition(savePosition);

            $("#modalStats").hide();

            $("#modalPersonalBG").hide();
            $("#modalRemoteBG").hide();
            $("#modalMinions").hide();
            $("#traitBtns").hide();

            setTimeout(executeMapRefresh, 5000);

            var availablePoints = @Model.userModel.points;
            if(availablePoints > 0){
                $("#traitBtns").show();
            }
        });

        $(function(){
            $(window).resize(function(){
                var h = $(window).height();
                //var w = $(window).width();
                $("#map").css('height', 0.8 * h);
            });
        });

        function executeMapRefresh() {
            //navigator.geolocation.getCurrentPosition(savePosition);
            $.ajax({
                type: "POST",
                url: '@Url.Action("RefreshMap")',
                data: { 'lat': UserMarker.getPosition().lat(), 'lon': UserMarker.getPosition().lng() },
                dataType: 'json',
                success: function (jsonData) {
                    if (jsonData != null) {
                        //alert(JSON.stringify(jsonData));
                        if (jsonData.length > 0) {
                            for (var i = 0; i < bgMarkersData.length; i++) {
                                bgMarkersData[i].setMap(null);
                            }
                            bgMarkersData = new Array();
                            for (var i = 0; i < jsonData.length; i++) {
                                refreshMarker(jsonData[i]);
                            }
                        }
                    }
                },
                error: function (jsonData) {
                    alert("Error");
                }
            });

            setTimeout(executeMapRefresh, 5000);
        }

        function refreshMarker(data) {
            var pos = new google.maps.LatLng({ lat: data.latitude, lng: data.longitude });
            var marker;

            var icon_location = "";
            var userCheck = "Player";
            var ncampCheck = "Neutral Camp";
            var ycampCheck = "Your Camp";
            var pcampCheck = "Player Camp";
            var hiveCheck = "Hive Node";
            var resCheck = "Resource Node";
            var carCheck = "Caravan";
            if(data.type.indexOf(userCheck) != -1){
                icon_location = 'http://minion-wars.azurewebsites.net/Content/icons/dwarf-face.png';
            }
            else if(data.type.indexOf(ncampCheck) != -1){
                icon_location = 'http://minion-wars.azurewebsites.net/Content/icons/castle-n.png';
            }
            else if(data.type.indexOf(ycampCheck) != -1){
                icon_location = 'http://minion-wars.azurewebsites.net/Content/icons/castle-y.png';
            }
            else if(data.type.indexOf(pcampCheck) != -1){
                icon_location = 'http://minion-wars.azurewebsites.net/Content/icons/castle-p.png';
            }
            else if(data.type.indexOf(hiveCheck) != -1){
                icon_location = 'http://minion-wars.azurewebsites.net/Content/icons/heart-tower.png';
            }
            else if(data.type.indexOf(resCheck) != -1){
                icon_location = 'http://minion-wars.azurewebsites.net/Content/icons/mine-wagon.png';
            }
            else if(data.type.indexOf(carCheck) != -1){
                icon_location = 'http://minion-wars.azurewebsites.net/Content/icons/old-wagon.png';
            }
            else{
                icon_location = 'http://minion-wars.azurewebsites.net/Content/icons/dwarf-helmet.png';
            }

            marker = new google.maps.Marker({
                position: pos,
                map: map,
                id: data.id,
                title: data.type,
                icon: icon_location
            });

            if(data.type.indexOf(userCheck) != -1){
                marker.addListener('click', function (e) {
                    targetLoc = this.getPosition();
                    targetId = this.id;
                    var distance = GetDistance(UserMarker.getPosition().lat(), UserMarker.getPosition().lng(), targetLoc.lat(), targetLoc.lng()).toFixed(2);
                    $("#target_distance").text("Distance: " + distance);
                    if (distance > 75) {
                        $("#btnInitiateAttack").prop("disabled", true);
                    }
                    else {
                        $("#btnInitiateAttack").prop("disabled", false);
                    }
                    $("#bgClickModal").modal();
                });
            }
            else if(data.type.indexOf(ncampCheck) != -1){
                marker.addListener('click', function (e) {
                    targetLoc = this.getPosition();
                    targetId = this.id;
                    var distance = GetDistance(UserMarker.getPosition().lat(), UserMarker.getPosition().lng(), targetLoc.lat(), targetLoc.lng()).toFixed(2);
                    $("#campDistance").text("Distance: " + distance);
                    $("#campDetails").text("Camp details - Neutral camp");
                    $("#campClickModal").modal();
                });
            }
            else if(data.type.indexOf(ycampCheck) != -1){
                marker.addListener('click', function (e) {
                    targetLoc = this.getPosition();
                    targetId = this.id;
                    var distance = GetDistance(UserMarker.getPosition().lat(), UserMarker.getPosition().lng(), targetLoc.lat(), targetLoc.lng()).toFixed(2);
                    $("#campDistance").text("Distance: " + distance);
                    $("#campDetails").text("Camp details - Your camp");
                    $("#campClickModal").modal();
                });
            }
            else if(data.type.indexOf(pcampCheck) != -1){
                marker.addListener('click', function (e) {
                    targetLoc = this.getPosition();
                    targetId = this.id;
                    var distance = GetDistance(UserMarker.getPosition().lat(), UserMarker.getPosition().lng(), targetLoc.lat(), targetLoc.lng()).toFixed(2);
                    $("#campDistance").text("Distance: " + distance);
                    $("#campDetails").text("Camp details - Player camp");
                    $("#campClickModal").modal();
                });
            }
            else if(data.type.indexOf(hiveCheck) != -1){
                marker.addListener('click', function (e) {
                    targetLoc = this.getPosition();
                    targetId = this.id;
                    var distance = GetDistance(UserMarker.getPosition().lat(), UserMarker.getPosition().lng(), targetLoc.lat(), targetLoc.lng()).toFixed(2);
                    $("#hive_target_distance").text("Distance: " + distance);
                    if (distance > 75) {
                        $("#btnConsumeHive").prop("disabled", true);
                    }
                    else {
                        $("#btnConsumeHive").prop("disabled", false);
                    }
                    $("#hiveNodeClickModal").modal();
                });
            }
            else if(data.type.indexOf(resCheck) != -1){
                marker.addListener('click', function (e) {
                    targetLoc = this.getPosition();
                    targetId = this.id;
                    var distance = GetDistance(UserMarker.getPosition().lat(), UserMarker.getPosition().lng(), targetLoc.lat(), targetLoc.lng()).toFixed(2);
                    $("#res_target_distance").text("Distance: " + distance);
                    if (distance > 75) {
                        $("#btnConsumeResource").prop("disabled", true);
                    }
                    else {
                        $("#btnConsumeResource").prop("disabled", false);
                    }
                    $("#resNodeClickModal").modal();
                });
            }
            else if(data.type.indexOf(carCheck) != -1){
                marker.addListener('click', function (e) {
                    targetLoc = this.getPosition();
                    targetId = this.id;
                    var distance = GetDistance(UserMarker.getPosition().lat(), UserMarker.getPosition().lng(), targetLoc.lat(), targetLoc.lng()).toFixed(2);
                    $("#caravan_target_distance").text("Distance: " + distance);
                    if (distance > 75) {
                        $("#btnConsumeCaravan").prop("disabled", true);
                    }
                    else {
                        $("#btnConsumeCaravan").prop("disabled", false);
                    }
                    $("#caravanClickModal").modal();
                });
            }
            else{
                marker.addListener('click', function (e) {
                    targetLoc = this.getPosition();
                    targetId = this.id;
                    var distance = GetDistance(UserMarker.getPosition().lat(), UserMarker.getPosition().lng(), targetLoc.lat(), targetLoc.lng()).toFixed(2);
                    $("#target_distance").text("Distance: " + distance);
                    if (distance > 100) {
                        $("#btnInitiateAttack").prop("disabled", true);
                    }
                    else {
                        $("#btnInitiateAttack").prop("disabled", false);
                    }
                    $("#bgClickModal").modal();
                });
            }

            //map.panTo(pos);
            bgMarkersData.push(marker);
        }

        function mapClickEvent(args) {
            var adresa = GetAddress(args.latLng);
            clickedPosition = args.latLng;
            var distance = GetDistance(UserMarker.getPosition().lat(), UserMarker.getPosition().lng(), args.latLng.lat(), args.latLng.lng()).toFixed(2);
            $("#distanceClick").text(distance + " metara");
            if (distance > 75) {
                $("#btnBuildCamp").prop("disabled", true);
            }
            else {
                $("#btnBuildCamp").prop("disabled", false);
            }
            $("#clickModal").modal();
        }

        function mapLoadedEvent(args) {
            map = args.map;
        }

        function savePosition(position) {
            var pos = new google.maps.LatLng({ lat: position.coords.latitude, lng: position.coords.longitude });
            if(map != null){
                if (UserMarker != null) {
                    UserMarker.setPosition(pos);
                }
                else {
                    UserMarker = new google.maps.Marker({
                        position: pos,
                        map: map,
                        id: 'UserMaker',
                        title: 'User',
                        icon: 'http://minion-wars.azurewebsites.net/Content/icons/barbute.png'
                    });
                    map.panTo(pos);
                }
            }
            $.ajax({
                type: "POST",
                url: '@Url.Action("UpdateUserPosition")',
                data: { 'lat': position.coords.latitude, 'lon': position.coords.longitude },
                dataType: 'json',
                success: function (jsonData) {

                },
                error: function (jsonData) {
                    alert("Error");
                }
            });
        }

        function GetAddress(latlng) {
            var geocoder = geocoder = new google.maps.Geocoder();
            geocoder.geocode({ 'latLng': latlng }, function (results, status) {
                if (status == google.maps.GeocoderStatus.OK) {
                    if (results[1]) {
                        $("#addressClick").text("Location: " + results[1].formatted_address);
                        $("#locClick").text(clickedPosition.lat() + " " + clickedPosition.lng());
                        return results[1].formatted_address;
                    }
                }
            });
        }

        function GetDistance(lat1, lon1, lat2, lon2) {
            var p = 0.017453292519943295;
            var c = Math.cos;
            var a = 0.5 - c((lat2 - lat1) * p) / 2 +
                    c(lat1 * p) * c(lat2 * p) *
                    (1 - c((lon2 - lon1) * p)) / 2;

            return 12742 * 1000 * Math.asin(Math.sqrt(a));
        }

        $(function () {
            $("#userTabs").tabs();
            $("#bgTabs").tabs();
            $("#campTabs").tabs();
            $("#campDetailTabs").tabs();
        });

        $("#btnBuildCamp").click(function () {
            var cname = $("#campName").val();
            if(cname == null || cname == "") alert("Name must not be empty");
            else{
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("BuildCamp")',
                    data: { 'lat': clickedPosition.lat(), 'lon': clickedPosition.lng(), 'name': cname },
                    dataType: 'json',
                    success: function (jsonData) {
                        if (jsonData != null) {
                            alert(JSON.stringify(jsonData));
                            location.reload();
                        }
                        $("#clickModal").modal('hide');
                    },
                    error: function (jsonData) {
                        alert("Error");
                    }
                });
            }
        });

        $("#btnSendMinions").click(function () {
            $.ajax({
                type: "POST",
                url: '@Url.Action("SendMinions")',
                data: { 'bg_id': $('#sendList :selected').val(), 'lat': clickedPosition.lat(), 'lon': clickedPosition.lng(), 'clat': UserMarker.getPosition().lat(), 'clon': UserMarker.getPosition().lng() },
                dataType: 'json',
                success: function (jsonData) {
                    if (jsonData != null) {
                        alert(JSON.stringify(jsonData));
                    }
                    $("#clickModal").modal('hide');
                },
                error: function (jsonData) {
                    alert("Error");
                }
            });
        });

        //user traits
        function increaseTrait(trait){
            $.ajax({
                type: "POST",
                url: '@Url.Action("IncreaseTrait")',
                data: { 'trait': trait },
                dataType: 'json',
                success: function (jsonData) {
                    alert(JSON.stringify(jsonData));
                    location.reload();
                },
                error: function (jsonData) {
                    alert("Error");
                }
            });
        }

        //camps
        function panToLocation(lat, lon){
            var pos = new google.maps.LatLng({ lat: lat, lng: lon });
            $("#campPageModal").modal('hide');
            map.panTo(pos);
        }

        var bCamp;
        var bBuild;
        function addNewBuilding(c_id, b_id, b_name, b_type){
            bCamp = c_id;
            bBuild = b_id;
            $("#buildingCreationName").text("Name: " + b_name);
            $("#buildingCreationType").text("Type: " + b_type);

            $("#buildingCreationCostsMetal").empty();
            $("#buildingCreationCostsStone").empty();
            $("#buildingCreationCostsWood").empty();
            $("#buildingCreationCostsFood").empty();

            $.ajax({
                type: "POST",
                url: '@Url.Action("GetBuildingCosts")',
                data: { 'building_id': bBuild },
                dataType: 'json',
                success: function (jsonData) {
                    //alert(JSON.stringify(jsonData));
                    for(var i=0; i<jsonData.length; i++){
                        var cost_amount = jsonData[i].cost.amount;
                        var cost_name = jsonData[i].res.name;
                        var cost_category = jsonData[i].res.category
                        var targetCost = "";
                        if(cost_category == "metal") targetCost = "#buildingCreationCostsMetal";
                        else if(cost_category == "stone") targetCost = "#buildingCreationCostsStone";
                        else if(cost_category == "wood") targetCost = "#buildingCreationCostsWood";
                        else if(cost_category == "food") targetCost = "#buildingCreationCostsFood";

                        $(targetCost).append( "<p>" + cost_name + ": " + cost_amount + "</p><hr />" );
                    }
                    $('#buildingCreationModal').modal('show');
                },
                error: function (jsonData) {
                    alert("Error");
                }
            });
        }

        function submitNewBuilding(){
            $.ajax({
                type: "POST",
                url: '@Url.Action("AddNewBuilding")',
                data: { 'camp_id': bCamp, 'building_id': bBuild },
                dataType: 'json',
                success: function (jsonData) {
                    alert(JSON.stringify(jsonData));
                    location.reload();
                },
                error: function (jsonData) {
                    alert("Error");
                }
            });
        }

        function destroyBuilding(c_id, b_id, type){
            $.ajax({
                type: "POST",
                url: '@Url.Action("DestroyBuilding")',
                data: { 'camp_id': c_id, 'building_id': b_id, 'type': type },
                dataType: 'json',
                success: function (jsonData) {
                    alert(JSON.stringify(jsonData));
                    location.reload();
                },
                error: function (jsonData) {
                    alert("Error");
                }
            });
        }

        //battlegroup functions
        function removeMinions(id) {
            $.ajax({
                type: "POST",
                url: '@Url.Action("RemoveMinions")',
                data: { 'a_id': id },
                dataType: 'json',
                success: function (jsonData) {
                    alert(JSON.stringify(jsonData));
                    location.reload();
                },
                error: function (jsonData) {
                    alert("Error");
                }
            });
        }

        function deleteGroup(id) {
            alert(id);
            alert(document.cookie);
        }

        var groupToAdd = -1;
        function addToGroup(id) {
            groupToAdd = id;
            $('#groupCreationModal').modal({
                show: 'true'
            });
        }

        function submitGroupAddition() {
            $.ajax({
                type: "POST",
                url: '@Url.Action("AddMinionsToGroup")',
                data: { 'o_id': groupToAdd, 'amount': $("#amount").val(), 'line': $("#groupCreationForm input[type='radio']:checked").val(), 'bg_id': $('#bgroupList :selected').val(), 'name': $("#additionName").val() },
                dataType: 'json',
                success: function (jsonData) {
                    //alert("success - " + JSON.stringify(jsonData));
                    location.reload();
                },
                error: function (jsonData) {
                    alert("Error");
                }
            });
        }

        $("#additionName").change(function () {
            if ($("#additionName").val() == "" || $("#additionName").val() == null) {
                $('#bgroupList').removeAttr('disabled');
            }
            else {
                $('#bgroupList').attr('disabled', 'disabled');
            }
        });

        function InitiateAttack() {
            $.ajax({
                type: "POST",
                url: '@Url.Action("InitiateCombat")',
                data: { 'pbg_id': @Model.personalBg.battlegroup.id, 'target_id': targetId },
                dataType: 'json',
                success: function (jsonData) {
                    alert(JSON.stringify(jsonData));
                    location.reload();
                },
                error: function (jsonData) {
                    alert("Error");
                }
            });
        }

        function ConsumeResource() {
            $.ajax({
                type: "POST",
                url: '@Url.Action("ConsumeResource")',
                data: { 'target_id': targetId },
                dataType: 'json',
                success: function (jsonData) {
                    alert(JSON.stringify(jsonData));
                    location.reload();
                },
                error: function (jsonData) {
                    alert("Error");
                }
            });
        }

        function ConsumeHive() {
            $.ajax({
                type: "POST",
                url: '@Url.Action("ConsumeHive")',
                data: { 'target_id': targetId },
                dataType: 'json',
                success: function (jsonData) {
                    alert(JSON.stringify(jsonData));
                    location.reload();
                },
                error: function (jsonData) {
                    alert("Error");
                }
            });
        }

        function ConsumeCaravan() {
            $.ajax({
                type: "POST",
                url: '@Url.Action("ConsumeCaravan")',
                data: { 'target_id': targetId },
                dataType: 'json',
                success: function (jsonData) {
                    alert(JSON.stringify(jsonData));
                    location.reload();
                },
                error: function (jsonData) {
                    alert("Error");
                }
            });
        }
    </script>
}